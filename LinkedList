//LinkedList.h
#pragma once
#include <iostream>
using namespace std;

struct node
{
	int data;
	node *next;
};

class LinkedList
{
private:
	node *head;
	node *tail;

public:
	LinkedList();
	~LinkedList();
	int size();
	void addNode(int nodeToAdd);
	void deleteNode(int nodeToDelete);
	void print();
};

//LinkedList.cpp
#include <iostream>
#include "LinkedList.h"
using namespace std;

LinkedList::LinkedList()
{
	node *head = NULL;
}

LinkedList::~LinkedList()
{

}

int LinkedList::size()
{
	if (head == NULL)
	{
		cout << "The list is empty" << endl;
		return 0;
	}

	else
	{
		int i = 0;
		node* temp = head;
		while (temp != NULL)
		{
			temp = temp->next;
			i++;
		}
		return i;
	}
}

void LinkedList::addNode(int nodeToAdd)
{
	if (head == NULL)
	{
		node *temp = new node;
		temp->data = nodeToAdd;
		temp->next = NULL;
		head = temp;
		tail = temp;
	}

	else
	{
		node *temp = new node;
		temp->data = nodeToAdd;
		temp->next = NULL;

		tail->next = temp;
		tail = tail->next;
	}
}

void LinkedList::deleteNode(int nodeToDelete)
{
	if (head == NULL)
	{
		cout << "nothing in the list to delete" << endl;
	}

	else
	{
		node* lead = head;
		node* follow = head;
		
		while (lead->data != nodeToDelete)
		{
			follow = lead;
			lead = lead->next;		
		}
		follow->next = lead->next;
		delete lead;
	}
}

void LinkedList::print()
{
	node *temp = new node;
	temp->next = NULL;
	temp = head;
	while (temp != NULL)
	{
		cout << temp->data << " ";
		temp = temp->next;
	}
	cout << endl;
}

//Source.cpp
#include <iostream>
#include "LinkedList.h"
using namespace std;

int main()
{
	LinkedList mylist;
	mylist.addNode(1);
	mylist.addNode(2);
	mylist.addNode(3);
	mylist.print();
	mylist.deleteNode(2);
	mylist.print();
	cout << mylist.size();


	system("pause");
	return 0;
}
